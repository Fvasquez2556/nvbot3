Instrucciones para la creaci√≥n del sistema web parte 3
üîß FASE 3: INTEGRACI√ìN CON NVBOT3 EXISTENTE
Paso 3.1: Crear Script de Integraci√≥n Autom√°tica
Crear archivo: scripts/integrate_feedback_system.py

#!/usr/bin/env python3
"""
Script para integrar autom√°ticamente el sistema de retroalimentaci√≥n
con tu nvbot3 existente SIN modificar tu c√≥digo principal
"""

import os
import sys
from pathlib import Path

def create_integration_module():
    """Crea m√≥dulo de integraci√≥n que se puede importar en tu c√≥digo existente"""
    
    integration_code = '''
# integration/nvbot3_feedback_bridge.py
"""
Puente de integraci√≥n entre nvbot3 existente y sistema de retroalimentaci√≥n
Importar este m√≥dulo en tu c√≥digo principal para activar tracking autom√°tico
"""

import sys
import os
from datetime import datetime

# Agregar path del sistema web
current_dir = os.path.dirname(os.path.abspath(__file__))
web_dashboard_path = os.path.join(current_dir, '..', 'web_dashboard')
sys.path.append(web_dashboard_path)

try:
    from database.signal_tracker import SignalTracker
    
    # Inicializar tracker global
    GLOBAL_TRACKER = SignalTracker()
    TRACKING_ENABLED = True
    print("‚úÖ Sistema de tracking inicializado")
    
except Exception as e:
    print(f"‚ö†Ô∏è Warning: Sistema de tracking no disponible: {e}")
    GLOBAL_TRACKER = None
    TRACKING_ENABLED = False

def track_signal(symbol, prediction_data, current_price):
    """
    Funci√≥n principal para trackear se√±ales
    
    Uso en tu c√≥digo existente:
    from integration.nvbot3_feedback_bridge import track_signal
    
    # Despu√©s de generar una predicci√≥n:
    if prediction['confidence'] > 0.75:
        track_signal(symbol, prediction, market_data['close'])
    """
    
    if not TRACKING_ENABLED or GLOBAL_TRACKER is None:
        return None
    
    try:
        # Determinar timeframe basado en tipo de se√±al
        timeframe_mapping = {
            'momentum': 240,        # 4 horas
            'momentum_alto': 240,   # 4 horas
            'rebound': 120,         # 2 horas
            'rebote_peque√±o': 120,  # 2 horas
            'regime': 480,          # 8 horas
            'consolidacion': 360,   # 6 horas
        }
        
        signal_type = prediction_data.get('type', 'unknown')
        expected_timeframe = timeframe_mapping.get(signal_type, 240)
        
        signal_data = {
            'type': signal_type,
            'entry_price': current_price,
            'predicted_change': prediction_data.get('predicted_change', 0) or prediction_data.get('change', 0),
            'confidence': prediction_data.get('confidence', 0),
            'expected_timeframe_minutes': expected_timeframe
        }
        
        signal_id = GLOBAL_TRACKER.save_new_signal(symbol, signal_data)
        
        print(f"üéØ Se√±al trackeada: {signal_id}")
        print(f"   üåê Ver en dashboard: http://localhost:5000")
        
        return signal_id
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error guardando se√±al: {e}")
        return None

def get_tracking_stats():
    """Obtener estad√≠sticas r√°pidas del sistema de tracking"""
    
    if not TRACKING_ENABLED:
        return {"status": "disabled"}
    
    try:
        stats = GLOBAL_TRACKER.get_performance_stats(days=7)
        return {
            "status": "active",
            "signals_last_7_days": stats.get('total_signals', 0),
            "success_rate": stats.get('success_rate', 0),
            "dashboard_url": "http://localhost:5000"
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}

def manual_price_update(symbol, price):
    """Actualizar precio manualmente (√∫til para testing)"""
    
    if not TRACKING_ENABLED:
        return False
    
    try:
        GLOBAL_TRACKER.update_price_tracking(symbol, price)
        print(f"üíπ Precio actualizado: {symbol} = ${price}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Error actualizando precio: {e}")
        return False

# Ejemplo de uso en tu c√≥digo principal
def example_integration():
    """
    Ejemplo de c√≥mo usar esto en tu c√≥digo existente de nvbot3
    """
    
    # Tu funci√≥n de predicci√≥n existente
    def your_prediction_function(symbol, market_data):
        # Tu l√≥gica existente...
        features = calculate_features(market_data)
        prediction = your_model.predict(features)
        
        # Si generas una se√±al de alta confianza
        if prediction['confidence'] > 0.75:
            # AGREGAR ESTA L√çNEA para tracking autom√°tico:
            track_signal(symbol, prediction, market_data['close'])
        
        return prediction

if __name__ == "__main__":
    # Test del sistema
    print("üß™ Testing sistema de integraci√≥n...")
    
    stats = get_tracking_stats()
    print(f"üìä Estado del tracking: {stats}")
    
    # Test signal (solo para prueba)
    test_signal = {
        'type': 'momentum_alto',
        'predicted_change': 5.2,
        'confidence': 0.85
    }
    
    result = track_signal('BTCUSDT', test_signal, 67250.0)
    
    if result:
        print(f"‚úÖ Test exitoso: {result}")
    else:
        print("‚ùå Test fall√≥")
'''
    
    # Crear directorio integration si no existe
    integration_dir = Path("integration")
    integration_dir.mkdir(exist_ok=True)
    
    # Escribir archivo de integraci√≥n
    with open("integration/nvbot3_feedback_bridge.py", "w", encoding='utf-8') as f:
        f.write(integration_code)
    
    # Crear __init__.py para hacer el directorio un paquete
    with open("integration/__init__.py", "w", encoding='utf-8') as f:
        f.write("# NvBot3 Feedback System Integration Package\n")
    
    print("‚úÖ M√≥dulo de integraci√≥n creado en: integration/nvbot3_feedback_bridge.py")

def create_startup_script():
    """Crea script para iniciar el dashboard web"""
    
    startup_code = '''#!/usr/bin/env python3
# scripts/start_dashboard.py
"""
Script para iniciar el dashboard web de NvBot3
Ejecutar en una terminal separada mientras tu bot principal est√° corriendo
"""

import sys
import os
import subprocess
from pathlib import Path

def check_requirements():
    """Verifica que todo est√© configurado"""
    
    print("üîç Verificando configuraci√≥n...")
    
    # Verificar estructura
    required_paths = [
        "web_dashboard/app.py",
        "web_dashboard/database/signal_tracker.py",
        "web_dashboard/templates/dashboard.html"
    ]
    
    missing = []
    for path in required_paths:
        if not Path(path).exists():
            missing.append(path)
    
    if missing:
        print("‚ùå Archivos faltantes:")
        for path in missing:
            print(f"   - {path}")
        return False
    
    # Verificar dependencias
    try:
        import flask
        import flask_socketio
        print("‚úÖ Dependencias instaladas")
    except ImportError as e:
        print(f"‚ùå Dependencias faltantes: {e}")
        print("   Ejecuta: pip install flask flask-socketio")
        return False
    
    print("‚úÖ Configuraci√≥n verificada")
    return True

def start_dashboard():
    """Inicia el dashboard web"""
    
    print("üåê Iniciando NvBot3 Dashboard...")
    print("=" * 50)
    print("üéØ Dashboard disponible en: http://localhost:5000")
    print("‚èπÔ∏è  Presiona Ctrl+C para detener")
    print("=" * 50)
    
    try:
        # Cambiar al directorio del dashboard
        os.chdir("web_dashboard")
        
        # Iniciar Flask app
        subprocess.run([sys.executable, "app.py"])
        
    except KeyboardInterrupt:
        print("\\nüõë Dashboard detenido por el usuario")
    except Exception as e:
        print(f"‚ùå Error iniciando dashboard: {e}")

def main():
    if not check_requirements():
        print("\\n‚ùå No se puede iniciar el dashboard")
        print("   Ejecuta primero: python scripts/integrate_feedback_system.py")
        return
    
    start_dashboard()

if __name__ == "__main__":
    main()
'''
    
    with open("scripts/start_dashboard.py", "w", encoding='utf-8') as f:
        f.write(startup_code)
    
    print("‚úÖ Script de inicio creado en: scripts/start_dashboard.py")

def create_example_modification():
    """Crea ejemplo de c√≥mo modificar tu c√≥digo principal"""
    
    example_code = '''
# examples/integration_example.py
"""
EJEMPLO: C√≥mo integrar el sistema de feedback con tu nvbot3 existente

ANTES DE APLICAR ESTAS MODIFICACIONES:
1. Ejecuta: python scripts/integrate_feedback_system.py
2. Instala: pip install flask flask-socketio
3. Inicia dashboard: python scripts/start_dashboard.py (en terminal separada)

MODIFICACI√ìN M√çNIMA A TU C√ìDIGO PRINCIPAL:
Solo necesitas agregar 2 l√≠neas a tu c√≥digo existente
"""

# ===== AL INICIO DE TU ARCHIVO PRINCIPAL =====
# AGREGAR ESTA L√çNEA:
from integration.nvbot3_feedback_bridge import track_signal

# ===== EN TU FUNCI√ìN DE PREDICCI√ìN =====
def tu_funcion_prediccion_existente(symbol, market_data):
    """Tu funci√≥n existente que genera predicciones"""
    
    # TODO TU C√ìDIGO EXISTENTE PERMANECE IGUAL...
    features = calculate_features(market_data)  # Tu c√≥digo
    prediction = your_models.predict(features)  # Tu c√≥digo
    
    # Tu l√≥gica de decisi√≥n existente
    if prediction['confidence'] > 0.75:
        
        # AGREGAR SOLO ESTA L√çNEA para tracking autom√°tico:
        track_signal(symbol, prediction, market_data['close'])
        
        # Todo lo dem√°s de tu c√≥digo sigue igual...
        return prediction
    
    return None

# ===== EJEMPLO COMPLETO DE INTEGRACI√ìN =====

import asyncio
from datetime import datetime

# IMPORTAR EL M√ìDULO DE INTEGRACI√ìN
from integration.nvbot3_feedback_bridge import track_signal, get_tracking_stats

async def nvbot3_main_loop():
    """Tu loop principal existente con tracking integrado"""
    
    # Tu configuraci√≥n existente
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']  # Tus s√≠mbolos
    
    # Mostrar estado del sistema de tracking
    stats = get_tracking_stats()
    if stats['status'] == 'active':
        print(f"üéØ Sistema de tracking activo")
        print(f"üìä Dashboard disponible en: {stats['dashboard_url']}")
    
    while True:
        for symbol in symbols:
            try:
                # Tu c√≥digo existente...
                market_data = get_market_data(symbol)
                prediction = generate_prediction(symbol, market_data)
                
                if prediction and prediction['confidence'] > 0.75:
                    print(f"üö® Se√±al detectada: {symbol} - {prediction['type']}")
                    
                    # NUEVA L√çNEA: Tracking autom√°tico
                    track_signal(symbol, prediction, market_data['close'])
                    
                    # Tu c√≥digo existente contin√∫a...
                    
            except Exception as e:
                print(f"Error con {symbol}: {e}")
                continue
        
        await asyncio.sleep(60)  # Tu intervalo existente

# EJEMPLO DE FUNCIONES AUXILIARES (para referencia)
def get_market_data(symbol):
    """Placeholder - usar tu funci√≥n existente"""
    return {
        'close': 67250.0,  # Precio actual
        'volume': 1000000,
        # ... otros datos
    }

def generate_prediction(symbol, market_data):
    """Placeholder - usar tu funci√≥n existente"""
    return {
        'type': 'momentum_alto',
        'predicted_change': 5.2,
        'confidence': 0.85
        # ... otros campos
    }

if __name__ == "__main__":
    print("ü§ñ Iniciando NvBot3 con sistema de tracking")
    asyncio.run(nvbot3_main_loop())
'''
    
    # Crear directorio examples si no existe
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    
    with open("examples/integration_example.py", "w", encoding='utf-8') as f:
        f.write(example_code)
    
    print("‚úÖ Ejemplo de integraci√≥n creado en: examples/integration_example.py")

def main():
    """Funci√≥n principal de integraci√≥n"""
    
    print("üîß INTEGRANDO SISTEMA DE FEEDBACK CON NVBOT3")
    print("=" * 55)
    
    try:
        # Verificar entorno actual
        if 'nvbot3_env' not in sys.executable:
            print("‚ö†Ô∏è Warning: Entorno virtual nvbot3_env no est√° activo")
            print("   Recomendado: nvbot3_env\\Scripts\\activate")
        
        # 1. Crear m√≥dulo de integraci√≥n
        print("\\n1. Creando m√≥dulo de integraci√≥n...")
        create_integration_module()
        
        # 2. Crear script de inicio
        print("\\n2. Creando script de inicio...")
        create_startup_script()
        
        # 3. Crear ejemplo de uso
        print("\\n3. Creando ejemplo de integraci√≥n...")
        create_example_modification()
        
        print("\\n" + "=" * 55)
        print("üéâ INTEGRACI√ìN COMPLETADA EXITOSAMENTE!")
        print("=" * 55)
        
        print("\\nüìã PR√ìXIMOS PASOS:")
        print("\\n1. Instalar dependencias adicionales:")
        print("   pip install flask flask-socketio")
        
        print("\\n2. Iniciar el dashboard web (terminal separada):")
        print("   python scripts/start_dashboard.py")
        
        print("\\n3. Modificar tu c√≥digo principal (agregar 1-2 l√≠neas):")
        print("   Ver ejemplo en: examples/integration_example.py")
        
        print("\\n4. Ejecutar tu nvbot3 como siempre:")
        print("   python tu_script_principal.py")
        
        print("\\n5. Abrir navegador:")
        print("   http://localhost:5000")
        
        print("\\nüéØ RESULTADO:")
        print("   ‚úÖ Tu bot funcionar√° exactamente igual")
        print("   ‚úÖ Cada se√±al se guardar√° autom√°ticamente")
        print("   ‚úÖ Dashboard web mostrar√° se√±ales en tiempo real")
        print("   ‚úÖ Sistema listo para recibir retroalimentaci√≥n")
        
    except Exception as e:
        print(f"‚ùå Error durante la integraci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

Paso 3.2: Crear Script de Test del Sistema
Crear archivo: scripts/test_feedback_system.py

#!/usr/bin/env python3
"""
Script para probar que el sistema de retroalimentaci√≥n funciona correctamente
"""

import sys
import time
from datetime import datetime
import random

# Importar nuestro sistema de integraci√≥n
sys.path.append('.')
from integration.nvbot3_feedback_bridge import track_signal, get_tracking_stats, manual_price_update

def test_signal_generation():
    """Genera se√±ales de prueba para verificar el sistema"""
    
    print("üß™ PROBANDO SISTEMA DE RETROALIMENTACI√ìN")
    print("=" * 50)
    
    # S√≠mbolos de prueba
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    
    # Generar 5 se√±ales de prueba
    for i in range(5):
        symbol = random.choice(test_symbols)
        
        # Generar datos de se√±al aleatorios pero realistas
        signal_types = ['momentum_alto', 'rebote_peque√±o', 'consolidacion']
        signal_type = random.choice(signal_types)
        
        test_signal = {
            'type': signal_type,
            'predicted_change': random.uniform(1.0, 8.0),
            'confidence': random.uniform(0.60, 0.95)
        }
        
        test_price = random.uniform(50000, 70000) if symbol == 'BTCUSDT' else random.uniform(2000, 4000)
        
        print(f"\\nüéØ Generando se√±al de prueba {i+1}/5:")
        print(f"   S√≠mbolo: {symbol}")
        print(f"   Tipo: {signal_type}")
        print(f"   Predicci√≥n: +{test_signal['predicted_change']:.1f}%")
        print(f"   Confianza: {test_signal['confidence']:.2f}")
        print(f"   Precio: ${test_price:.2f}")
        
        # Guardar la se√±al
        signal_id = track_signal(symbol, test_signal, test_price)
        
        if signal_id:
            print(f"   ‚úÖ Se√±al guardada: {signal_id}")
            
            # Simular actualizaci√≥n de precio despu√©s de unos segundos
            time.sleep(2)
            new_price = test_price * random.uniform(0.98, 1.05)  # Cambio de -2% a +5%
            manual_price_update(symbol, new_price)
            print(f"   üìà Precio actualizado: ${new_price:.2f} ({((new_price-test_price)/test_price*100):+.2f}%)")
        else:
            print(f"   ‚ùå Error guardando se√±al")
        
        time.sleep(1)
    
    # Mostrar estad√≠sticas finales
    print(f"\\nüìä ESTAD√çSTICAS DEL SISTEMA:")
    stats = get_tracking_stats()
    print(f"   Estado: {stats['status']}")
    if stats['status'] == 'active':
        print(f"   Se√±ales (7 d√≠as): {stats['signals_last_7_days']}")
        print(f"   Tasa de √©xito: {stats['success_rate']:.1f}%")
        print(f"   Dashboard: {stats['dashboard_url']}")
    
    print(f"\\nüéâ PRUEBA COMPLETADA")
    print(f"üåê Ve las se√±ales en: http://localhost:5000")

if __name__ == "__main__":
    test_signal_generation()
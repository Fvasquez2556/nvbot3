üéØ INSTRUCCIONES PARA GITHUB COPILOT
üìã TAREA: Crear src/data/feature_calculator.py
CONTEXTO: Sistema NvBot3 de trading con IA. Los CSV est√°n validados y listos. Necesitas crear un calculador de features t√©cnicos profesional.

üìÅ ESPECIFICACIONES DEL ARCHIVO:
Ubicaci√≥n: src/data/feature_calculator.py
Objetivo: Calcular 151 features t√©cnicos organizados en 6 categor√≠as para entrenamiento de modelos de trading.

üîß CARACTER√çSTICAS T√âCNICAS REQUERIDAS:
python# ESTRUCTURA DE CLASES REQUERIDA:
class FeatureCalculator:
    def __init__(self):
        # Configurar paths y par√°metros
        # Setup logging
        # Crear directorios de salida
        
    def calculate_all_features(self, symbol: str, timeframe: str) -> pd.DataFrame:
        # M√©todo principal que llama a todas las categor√≠as
        
    def calculate_momentum_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # 17 features: ROC, ADX, MACD, RSI, Stochastic, Williams %R
        
    def calculate_rebound_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # 15 features: RSI reversal, MACD divergence, Volume patterns
        
    def calculate_regime_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # 20 features: ATR, BB Width, ADX, Market structure
        
    def calculate_volume_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # Features de volumen: OBV, Volume ratios, Volume momentum
        
    def calculate_price_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # Features de precio: MA, EMA, Bollinger Bands
        
    def calculate_pattern_features(self, df: pd.DataFrame) -> pd.DataFrame:
        # Features de patrones: Support/Resistance, Breakouts

üìä FEATURES ESPEC√çFICOS A IMPLEMENTAR:
1. MOMENTUM FEATURES (17 total):

RSI (7, 14, 21 per√≠odos)
ROC (5, 10, 20 per√≠odos)
ADX (14)
MACD (12,26,9) + Signal + Histogram
Stochastic (14,3,3)
Williams %R (14)

2. REBOUND FEATURES (15 total):

RSI oversold/overbought signals
MACD bullish/bearish divergence
Volume spike detection
Price deviation from MA

3. REGIME FEATURES (20 total):

ATR (14)
Bollinger Band Width
Market volatility indicators
Trend strength indicators

4. VOLUME FEATURES:

OBV (On-Balance Volume)
Volume Moving Averages
Volume Rate of Change
Volume relative to average

5. PRICE FEATURES:

SMA (5,10,20,50,100,200)
EMA (12,26,50)
Bollinger Bands + Position

6. PATTERN FEATURES:

Support/Resistance levels
Breakout detection
Consolidation patterns


üíæ ESPECIFICACIONES DE ENTRADA/SALIDA:
Input:

Archivos CSV desde data/raw/{symbol}_{timeframe}.csv
Formato: timestamp, open, high, low, close, volume

Output:

Guardar en data/processed/{symbol}_{timeframe}_features.csv
Incluir todas las columnas originales + 151 features nuevas


üîß DEPENDENCIAS REQUERIDAS:
pythonimport pandas as pd
import numpy as np
import ta  # Technical Analysis library
import logging
from pathlib import Path
from typing import Dict, List, Optional

üìã FUNCIONALIDADES ADICIONALES:

Progress tracking: Barra de progreso con tqdm
Error handling: Try-catch robusto
Logging: Informaci√≥n detallada de proceso
Validaci√≥n: Verificar que features no tienen inf/NaN
Resumen: Mostrar estad√≠sticas de features calculadas
Memory efficiency: Procesar en chunks si es necesario


üöÄ COMANDOS DE EJECUCI√ìN:
bash# Procesar s√≠mbolo espec√≠fico
python src/data/feature_calculator.py --symbol BTCUSDT --timeframe 5m

# Procesar todos los s√≠mbolos
python src/data/feature_calculator.py --all-symbols

# Con guardado autom√°tico
python src/data/feature_calculator.py --all-symbols --save

‚ö†Ô∏è INSTRUCCIONES CR√çTICAS:

USAR la librer√≠a ta para indicadores t√©cnicos profesionales
MANEJAR NaN values apropiadamente (forward fill limitado)
PRESERVAR timestamps como √≠ndice del DataFrame
LOGGING extensivo para debugging
VALIDAR datos antes de calcular features
OPTIMIZAR memoria para archivos grandes
CATEGORIZAR features claramente con prefijos


üéØ RESULTADO ESPERADO: Un m√≥dulo robusto que transforme los 150 CSV validados en datasets listos para entrenamiento de ML, con 151 features t√©cnicos organizados y etiquetados correctamente.
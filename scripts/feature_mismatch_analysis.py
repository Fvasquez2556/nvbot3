#!/usr/bin/env python3
"""
Comprehensive analysis of the feature mismatch between FeatureCalculator and trained models.
"""

import pandas as pd
from pathlib import Path

def analyze_feature_mismatch():
    """Analyze the feature mismatch between FeatureCalculator and training data."""
    print("FEATURE MISMATCH ANALYSIS")
    print("=" * 80)
    
    # Expected features based on training data analysis
    training_data_features = 146
    
    # Features generated by FeatureCalculator (from our test)
    feature_calculator_features = 141
    
    # Missing features
    missing_features = training_data_features - feature_calculator_features
    
    print(f"Training data expects: {training_data_features} features")
    print(f"FeatureCalculator generates: {feature_calculator_features} features")
    print(f"Missing features: {missing_features}")
    print()
    
    # Analyze actual training data to find the extra columns
    print("ANALYSIS OF ACTUAL TRAINING DATA:")
    print("-" * 50)
    
    # Read one training data file to see the actual features
    try:
        sample_file = Path("data/processed/BTCUSDT_5m_with_targets.csv")
        if sample_file.exists():
            df = pd.read_csv(sample_file, nrows=0)  # Only read headers
            all_columns = list(df.columns)
            
            print(f"Total columns in training file: {len(all_columns)}")
            
            # Identify columns based on model_trainer.py exclude list
            exclude_columns = [
                'symbol', 'timeframe', 'timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time',
                'quote_asset_volume', 'number_of_trades', 
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume',
                'momentum_target', 'rebound_target', 'regime_target', 'momentum_advanced_target'
            ]
            
            existing_exclude_cols = [col for col in exclude_columns if col in all_columns]
            actual_features = [col for col in all_columns if col not in exclude_columns]
            
            print(f"Excluded columns present: {len(existing_exclude_cols)}")
            print(f"Actual feature columns: {len(actual_features)}")
            
            print("\nExcluded columns found in data:")
            for col in existing_exclude_cols:
                print(f"  - {col}")
            
            print(f"\nFirst 20 actual feature columns:")
            for i, col in enumerate(actual_features[:20]):
                print(f"  {i+1:2d}. {col}")
            
            if len(actual_features) > 20:
                print(f"  ... and {len(actual_features) - 20} more")
            
            # The extra columns that FeatureCalculator doesn't generate
            extra_columns_in_training = [
                'close_time', 'quote_asset_volume', 'number_of_trades', 
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume'
            ]
            
            extra_present = [col for col in extra_columns_in_training if col in all_columns]
            
            print(f"\nEXTRA COLUMNS FROM BINANCE DATA:")
            print("These are additional columns from the raw Binance data:")
            for col in extra_present:
                print(f"  - {col}")
            
            print(f"\nTOTAL FEATURE COUNT BREAKDOWN:")
            print(f"FeatureCalculator generates: {feature_calculator_features} features")
            print(f"Extra Binance columns: {len(extra_present)} columns")
            print(f"Total expected: {feature_calculator_features + len(extra_present)} features")
            print(f"Actual in training data: {len(actual_features)} features")
            
            remaining_diff = len(actual_features) - (feature_calculator_features + len(extra_present))
            if remaining_diff != 0:
                print(f"Still unaccounted for: {remaining_diff} features")
            else:
                print("✅ MISMATCH EXPLAINED!")
            
        else:
            print("❌ Sample training file not found")
    
    except Exception as e:
        print(f"❌ Error analyzing training data: {e}")
    
    print("\nSOLUTION:")
    print("=" * 30)
    print("The FeatureCalculator is missing the additional Binance data columns:")
    print("- close_time")
    print("- quote_asset_volume") 
    print("- number_of_trades")
    print("- taker_buy_base_asset_volume")
    print("- taker_buy_quote_asset_volume")
    print()
    print("These columns exist in the raw data but are not being processed by FeatureCalculator.")
    print("The model trainer excludes them from features, but they're counted in the total.")
    print("Either:")
    print("1. Add these columns to FeatureCalculator output (include in processed data)")
    print("2. Or update the model expectations to match FeatureCalculator output")

if __name__ == "__main__":
    analyze_feature_mismatch()